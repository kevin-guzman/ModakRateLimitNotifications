// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	model "modak_golang/internal/domain/model"

	mock "github.com/stretchr/testify/mock"

	time "time"

	valueobjects "modak_golang/internal/domain/model/valueobjects"
)

// NotificationRepository is an autogenerated mock type for the NotificationRepository type
type NotificationRepository struct {
	mock.Mock
}

// GetLastNotificationDate provides a mock function with given fields: recipientId
func (_m *NotificationRepository) GetLastNotificationDate(recipientId string) time.Time {
	ret := _m.Called(recipientId)

	if len(ret) == 0 {
		panic("no return value specified for GetLastNotificationDate")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func(string) time.Time); ok {
		r0 = rf(recipientId)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// GetNotificationsCountForRecipient provides a mock function with given fields: recipientId, interval
func (_m *NotificationRepository) GetNotificationsCountForRecipient(recipientId string, interval valueobjects.IntervalType) int {
	ret := _m.Called(recipientId, interval)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationsCountForRecipient")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(string, valueobjects.IntervalType) int); ok {
		r0 = rf(recipientId, interval)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// SendNotification provides a mock function with given fields: n
func (_m *NotificationRepository) SendNotification(n model.Notification) error {
	ret := _m.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for SendNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Notification) error); ok {
		r0 = rf(n)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewNotificationRepository creates a new instance of NotificationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationRepository {
	mock := &NotificationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
